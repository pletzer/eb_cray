easyblock = 'CMakeMake'

name = 'LLVM'
version = '6.0.0'

homepage = "http://llvm.org/"
description = """
 The LLVM Core libraries provide a modern source- and target-independent
 optimizer, along with code generation support for many popular CPUs
 (as well as some less common ones!) These libraries are built around a well
 specified code representation known as the LLVM intermediate representation
 ("LLVM IR"). The LLVM Core libraries are well documented, and it is
 particularly easy to invent your own language (or port an existing compiler)
 to use LLVM as an optimizer and code generator.

 This build includes the clang C/C++ compiler frontend.
"""

toolchain = {'name': 'GCC', 'version': '6.3.0'}
toolchainopts = {'cstd': 'gnu++11', 'pic': True}

source_urls = ["http://llvm.org/releases/%(version)s"]
sources = [
    "llvm-%(version)s.src.tar.xz",
    "cfe-%(version)s.src.tar.xz"
]
checksums = [
    '1ff53c915b4e761ef400b803f07261ade637b0c269d99569f18040f3dcee4408',  # llvm-6.0.0.src.tar.xz
    'e07d6dd8d9ef196cfc8e8bb131cbd6a2ed0b1caf1715f9d05b0f0eeaddb6df32',  # cfe-6.0.0.src.tar.xz
]

builddependencies = [
    ('CMake', '3.10.2'),
]

# Clang will be built automatically if found in the tools directory
preconfigopts = 'ln -s %(builddir)s/cfe-%(version)s.src %(builddir)s/llvm-%(version)s.src/tools/clang; '

configopts = '-DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DLLVM_ENABLE_RTTI=ON '
configopts += '-DLLVM_INSTALL_UTILS=ON -DLLVM_TARGETS_TO_BUILD=X86 '
# Needed for building ISPC with Clang
configopts += '-DLLVM_ENABLE_DUMP=ON '
# Specifying this prefix is crucial for using Clang with dual-ABI GNU C++ STL
configopts += '-DGCC_INSTALL_PREFIX=$(dirname $(which gcc))/.. '

# Runs for a long time
# runtest = 'check'

sanity_check_paths = {
    'files': ['bin/llvm-ar', 'bin/FileCheck', 'bin/clang', 'bin/clang++'],
    'dirs': ['include/llvm', 'include/llvm-c'],
}

modextravars = {'LLVM_HOME': '%(installdir)s'}

separate_build_dir = True

moduleclass = 'compiler'
